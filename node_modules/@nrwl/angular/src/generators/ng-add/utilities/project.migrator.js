"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectMigrator = void 0;
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const logger_1 = require("./logger");
class ProjectMigrator {
    constructor(tree, options, project, rootDir, logger) {
        var _a, _b, _c;
        this.tree = tree;
        this.options = options;
        this.projectConfig = project.config;
        this.project = {
            name: project.name,
            oldRoot: (_a = this.projectConfig.root) !== null && _a !== void 0 ? _a : '',
            oldSourceRoot: (_c = (_b = this.projectConfig.sourceRoot) !== null && _b !== void 0 ? _b : this.projectConfig.root) !== null && _c !== void 0 ? _c : '',
            newRoot: `${rootDir}/${project.name}`,
            newSourceRoot: `${rootDir}/${project.name}/src`,
        };
        this.logger = logger !== null && logger !== void 0 ? logger : new logger_1.Logger(this.project.name);
    }
    get projectName() {
        return this.project.name;
    }
    convertAsset(asset) {
        if (typeof asset === 'string') {
            return this.convertSourceRootPath(asset);
        }
        else {
            return Object.assign(Object.assign({}, asset), { input: this.convertSourceRootPath(asset.input) });
        }
    }
    convertEsLintConfigExtendToNewPath(eslintConfigPath, extendPath) {
        if (!extendPath.startsWith('..')) {
            // we only need to adjust paths that are on a different directory, files
            // in the same directory are moved together so their relative paths are
            // not changed
            return extendPath;
        }
        return (0, devkit_1.joinPathFragments)((0, devkit_1.offsetFromRoot)(this.project.newRoot), (0, path_1.dirname)(eslintConfigPath), extendPath);
    }
    convertSourceRootPath(originalPath) {
        return (originalPath === null || originalPath === void 0 ? void 0 : originalPath.startsWith(this.project.oldSourceRoot))
            ? (0, devkit_1.joinPathFragments)(this.project.newSourceRoot, originalPath.replace(this.project.oldSourceRoot, ''))
            : originalPath;
    }
    convertRootPath(originalPath) {
        return (originalPath === null || originalPath === void 0 ? void 0 : originalPath.startsWith(this.project.oldRoot))
            ? (0, devkit_1.joinPathFragments)(this.project.newRoot, originalPath.replace(this.project.oldRoot, ''))
            : originalPath;
    }
    convertPath(originalPath) {
        if (originalPath === null || originalPath === void 0 ? void 0 : originalPath.startsWith(this.project.oldSourceRoot)) {
            return (0, devkit_1.joinPathFragments)(this.project.newSourceRoot, originalPath.replace(this.project.oldSourceRoot, ''));
        }
        if (this.project.oldRoot !== '' &&
            (originalPath === null || originalPath === void 0 ? void 0 : originalPath.startsWith(this.project.oldRoot))) {
            return (0, devkit_1.joinPathFragments)(this.project.newRoot, originalPath.replace(this.project.oldRoot, ''));
        }
        return originalPath;
    }
    getTargetValuesForOption(target, optionPath) {
        const values = new Set();
        const value = this.getValueForOption(target.options, optionPath);
        if (value) {
            values.add(value);
        }
        if (target.configurations) {
            for (const configuration of Object.values(target.configurations)) {
                const value = this.getValueForOption(configuration, optionPath);
                if (value) {
                    values.add(value);
                }
            }
        }
        return Array.from(values);
    }
    getValueForOption(options, optionPath) {
        const segments = optionPath.split('.');
        let value = options;
        for (const segment of segments) {
            if (value && value[segment]) {
                value = value[segment];
            }
            else {
                return null;
            }
        }
        return value;
    }
    moveProjectRootFile(filePath, isRequired = true) {
        if (!filePath) {
            return;
        }
        const filename = !!filePath ? (0, path_1.basename)(filePath) : '';
        const from = filePath;
        const to = (0, devkit_1.joinPathFragments)(this.project.newRoot, filename);
        this.moveFile(from, to, isRequired);
    }
    moveDir(from, to) {
        (0, devkit_1.visitNotIgnoredFiles)(this.tree, from, (file) => {
            this.moveFile(file, file.replace(from, to), true);
        });
    }
    moveFile(from, to, required = true) {
        if (!this.tree.exists(from)) {
            if (required) {
                this.logger.warn(`The path "${from}" does not exist. Skipping.`);
            }
        }
        else if (this.tree.exists(to)) {
            if (required) {
                this.logger.warn(`The path "${to}" already exists. Skipping.`);
            }
        }
        else {
            const contents = this.tree.read(from);
            this.tree.write(to, contents);
            this.tree.delete(from);
        }
    }
    updateTsConfigFile(tsConfigPath, rootTsConfigFile, projectOffsetFromRoot) {
        (0, devkit_1.updateJson)(this.tree, tsConfigPath, (json) => {
            var _a;
            json.extends = `${projectOffsetFromRoot}${rootTsConfigFile}`;
            json.compilerOptions = (_a = json.compilerOptions) !== null && _a !== void 0 ? _a : {};
            json.compilerOptions.outDir = `${projectOffsetFromRoot}dist/out-tsc`;
            return json;
        });
    }
}
exports.ProjectMigrator = ProjectMigrator;
//# sourceMappingURL=project.migrator.js.map